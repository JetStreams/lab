buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.4'
        classpath 'com.eriwen:gradle-css-plugin:1.11.1'
        classpath 'com.eriwen:gradle-js-plugin:1.12.1'
        classpath 'org.bitbucket.grimrose:gradle-obake-plugin:0.6'
    }
}


apply plugin: 'war'
apply plugin: 'tomcat'
apply plugin: 'js'
apply plugin: 'css'
apply plugin: 'obake'

archivesBaseName = 'jetstreams'

ext {
    jsSrcDir = 'src/main/webapp/WEB-INF/views/res/js'
    env = 'dev'
    
    name = System.getProperty("os.name").toLowerCase();
    if(name.indexOf("win") >= 0){
        os = "windows";
    }else if(name.indexOf("mac") >= 0){
        os = "macosx";
    }else {
        os = "linux";
    }
}


dependencies {
    compile project(':core')
    compile 'org.springframework:spring-webmvc:4.0.6.RELEASE', \
            'commons-fileupload:commons-fileupload:1.3.1', \
            'net.sf.ehcache:ehcache-web:2.0.4'

    testCompile 'org.mockito:mockito-core:1.9.5', 'org.springframework:spring-test:4.0.6.RELEASE'

    providedCompile 'javax.servlet:servlet-api:2.5'
    
    def tomcatVersion = '7.0.57'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
}

javascript.source {
    dev {
        js {
            srcDir jsSrcDir
            include "**/*.js"
            exclude "**/*.min.js"
        }
    }
    prod {
        js {
            srcDir jsSrcDir
            include "*.min.js"
        }
    }
}

combineJs {
    if (env == 'prod') {
        source = javascript.source.prod.js.files
    } else {
        source = javascript.source.dev.js.files
    }
    dest = file("${buildDir}/all.js")
}

minifyJs {
    source = combineJs
    dest = file("${buildDir}/all.min.js")
    closure {
        warningLevel = 'QUIET'
    }
}

phantomJSAgent {
    js = "tools/phantomjs/1.9.7/$os/examples/version.js"
}

task runJsTest(type: org.bitbucket.grimrose.gradle.PhantomJSAgentTask) {
    js = "src/test/resources/js/run-jasmine.js"
    File runner = file('src/test/resources/js/runner.html')
    println("runner: $runner.")
    args = [runner]
    outputFile = file("$buildDir/result.txt")
}
   